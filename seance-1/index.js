/**
 * Pour initialiser un projet NodeJS :
 * npm init
 * Une fois tous les champs remplis, un fichier package.json est crÃ©Ã©
 * 
 * Pour installer des paquets :
 * npm i nom-du-paquet1 nom-du-paquet2
 * 
 * Les paquets installÃ©s apparaissent dans le fichier package.json, ce qui permet Ã  unÂ·e autre
 * dÃ©veloppeurÂ·se de simplement exÃ©cuter "npm install" pour installer toutes les dÃ©pendances
 * nÃ©cessaires Ã  ton projet, sans avoir besoin du dossier node_modules/ qui peut Ãªtre trÃ¨s lourd.
 * 
 * 
 * NodeJS, c'est un peu le bordel. Deux standards d'import/export coexistent en JavaScript :
 * - CommonJS :	const fs = require('fs');	(trÃ¨s rÃ©pandu)
 * - ESM :		import fs from 'fs';		(assez rÃ©cent)
 * 
 * Avantages du standard ESM :
 * - c'est la mÃªme syntaxe que sur le web
 * - NodeJS va passer Ã  100 % ESM trÃ¨s bientÃ´t, donc autant prendre de bonnes habitudes
 * 
 * Pour exÃ©cuter du code CommonJS en mode ESM, pendant la pÃ©riode de transition :
 * node -r esm .
 */

// fs (filesystem) : installÃ© par dÃ©faut dans NodeJs, permet de lire/Ã©crire des fichiers
import fs from 'fs';

// node-fetch : permet d'exÃ©cuter des requÃªtes HTTP, notamment pour lire des fichiers distants
// => comportement identique Ã  la fonction fetch() qui est le standard sur le web
import fetch from 'node-fetch';


// fetch renvoie une PROMESSE = le rÃ©sultat asynchrone d'un tÃ¢che qui peut prendre du temps Ã  s'exÃ©cuter
const promise = fetch('https://media.lesechos.fr/infographie/embed-tracker-parrainages/data-2022.json');
console.log(promise); // Promise { <pending> }

/** Comment manipuler les promesses ? **/

/* Option 1 : then */
// .then() prend comme paramÃ¨tre une fonction, qui reÃ§oit le rÃ©sultat de la promesse une fois rÃ©solue
fetch('https://media.lesechos.fr/infographie/embed-tracker-parrainages/data-2022.json')
	.then((response) => response.json())
	// response est la rÃ©ponse de la requÃªte : code 200 = elle a abouti, sinon erreur (403, 404, etc.)
	// On convertit la rÃ©ponse en JSON avec .json(), qui renvoie elle-mÃªme une promesse
	.then((data) => {
		// data est le rÃ©sultat de la promesse renvoyÃ©e par response.json() : notre tableau de donnÃ©es
		console.log(data.length);
		// Le reste de notre code...
	});

/* Option 2 : async/await */
// await permet d'attendre que la promesse soit rÃ©solue pour rÃ©cupÃ©rer son rÃ©sultat
(async () => {
	const response = await fetch('https://media.lesechos.fr/infographie/embed-tracker-parrainages/data-2022.json');
	const data = await response.json();
	console.log(data.length);
	// Le reste de notre code...
})();
// await ne peut fonctionner qu'au sein d'une fonction asynchrone (async), c'est pourquoi
// on entoure le code d'une fonction async anonyme invoquÃ©e immÃ©diatement

/* Option 3 : mÃªler les deux ! */
(async () => {
	const data2022 = await fetch('https://media.lesechos.fr/infographie/embed-tracker-parrainages/data-2022.json')
		.then((r) => r.json());
	console.log(data2022.length);


	/* Quel pourcentage des parrainages sont des hommes ? */
	console.log(data2022.filter((d) => d.civility === 'M.').length / data2022.length * 100);
	// filter() prend en paramÃ¨tre une fonction qui s'applique Ã  chaque Ã©lÃ©ment d du tableau data2022,
	// et ne renvoie que les Ã©lÃ©ments qui vÃ©rifient la condition donnÃ©e


	/* Combien de parrainages proviennent de maires (y compris dÃ©lÃ©guÃ©Â·eÂ·s, d'arrondissement, etc.) ? */
	console.log(data2022.filter((d) => d.mandate.includes('Maire')).length);
	// includes() indique si la chaÃ®ne contient un certain texte


	/* Combien de femmes maires ont parrainÃ© Zemmour ? */
	console.log(data2022.filter((d) => d.candidate === 'zemmour' && d.mandate.includes('Maire') && d.civility === 'Mme').length);


	/* QuelÂ·leÂ·s candidatÂ·eÂ·s ont reÃ§u des parrainages ? */
	console.log([...new Set(data2022.map((d) => d.candidate))]);
	// .map() renvoie un nouveau tableau avec les noms des candidatÂ·eÂ·s
	// new Set() permet de construire un Set avec les noms uniques
	// [...] (opÃ©rateur de dÃ©composition) permet de convertir le Set en tableau
	// => Technique trÃ¨s utile pour obtenir les Ã©lÃ©ments uniques dans un tableau avec des doublons !


	/** Le cas reduce() **/
	// reduce() est galÃ¨re Ã  comprendre mais SUPER utile et performant, pour...
	
	/* ...faire la somme d'un tableau de nombres */
	const array = [2, 3, 8, 6, 1, 7, 4, 5];
	console.log(array.reduce((acc, d) => acc + d, 0));
	// 0 est la valeur initiale de l'accumulateur (acc)
	// puis Ã  chaque Ã©tape, on ajoute d Ã  l'accumulateur
	// RÃ©sultat : on obtient la somme des Ã©lÃ©ments du tableau

	/* ...crÃ©er un nouveau tableau */
	console.log(array.reduce((acc, d) => [...acc, d * 2], []));
	// Ici, la valeur initial d'acc est un tableau vide
	// puis Ã  chaque Ã©tape, on ajoute d * 2 au tableau
	// Ã‰quivalent Ã  array.map((d) => d * 2)

	console.log(array.reduce((acc, d) => {
		if (d >= 4) {
			return [...acc, d];
		}
		return acc;
	}, []));
	// Ici, Ã  chaque Ã©tape on n'ajoute d au tableau que si d >= 4
	// Ã‰quivalent Ã  array.filter((d) => d >= 4)

	/* ...exÃ©cuter des promesses l'une aprÃ¨s l'autre */
	// Admettons qu'on souhaite scraper le texte d'une sÃ©rie de pages web...
	const URLS = [
		'https://example.com',
		'https://tomfevrier.io',
		'https://lesechos.fr'
	];

	// (fonction qui permet d'attendre un certain temps, ne t'en soucie pas trop)
	const sleep = (time) => new Promise((resolve) => setTimeout(() => resolve(), time))

	const webpagesSimultaneous = await Promise.all(URLS.map(async (url) => {
		console.log('Scraping', url);
		const html = await fetch(url).then((r) => r.text());
		await sleep(2000);
		return html;
	}));
	console.log(webpagesSimultaneous);
	// Promise.all() permet de renvoyer le rÃ©sultat d'un tableau de promesses
	// ProblÃ¨me : les 3 pages sont scrapÃ©es en mÃªme temps !

	const webpagesSequential = await URLS.reduce(async (promise, url) => {
		const pages = await promise;
		console.log('Scraping', url);
		const html = await fetch(url).then((r) => r.text());
		await sleep(2000);
		return [...pages, html];
	}, Promise.resolve([]));
	console.log(webpagesSequential);
	// Comment Ã§a marche ?
	// - on initialise l'accumulateur avec une promesse qui renvoie un tableau vide
	// - Ã  chaque Ã©tape, on await cette promesse pour rÃ©cupÃ©rer les pages dÃ©jÃ  scrapÃ©es
	// - aprÃ¨s les 2 secondes de pause, on renvoie un tableau avec la nouvelle page
	// - Ã  la fin, on a une unique promesse qui se rÃ©sout avec un tableau contenant les 3 pages
	// MIND BLOWN ğŸ¤¯
	
	
	/** Comment savoir qui les Ã©luÂ·eÂ·s qui ont parrainÃ© Zemmour en 2022 avaient parrainÃ© en 2017 ? **/

	/* Comment lire un fichier JSON local avec NodeJS */
	const data2017 = JSON.parse(fs.readFileSync('data-2017.json').toString());
	// fs.readFileSync() lit le fichier de maniÃ¨re synchrone mais renvoie un buffer illisible
	// On le convertit en chaÃ®ne de caractÃ¨re avec .toString()
	// On le convertit en JSON avec JSON.parse()

	// Ã€ noter que sur le web, on utilisera fetch() peu importe si le fichier est local ou distant

	// BOUM ğŸ’¥
	console.log(
		data2022.filter((d) => d.candidate === 'zemmour').reduce((acc, d) => {
			const sponsor2017 = data2017.find((e) => e.name === d.name && e.constituency === d.constituency);
			if (sponsor2017) {
				const candidate2017 = sponsor2017.candidate;
				acc[candidate2017] = (acc[candidate2017] || 0) + 1;
			}
			return acc;
		}, {})
	);

	/**
	 * DÃ©composons un peu...
	 * - on filtre les parrainages de 2022 pour n'avoir que ceux de Zemmour
	 * - on initialise l'accumulateur comme un objet vide {}
	 * - Ã  chaque Ã©tape, si le ou la mÃªme Ã©luÂ·e avait parrainÃ© quelqu'un (mÃªme nom et mÃªme circonscription)...
	 * - ... on rÃ©cupÃ¨re le ou la candidatÂ·e qu'iel avait parrainÃ©Â·e...
	 * - ... et on incrÃ©mente le compteur Ã  la bonne clÃ© dans notre objet/dictionnaire
	 * - enfin, on retourne l'accumulateur pour l'Ã©tape suivante
	 * 
	 * PrÃ©cision :
	 * Ã€ la place de acc[candidate2017] = (acc[candidate2017] || 0) + 1, on aurait pu Ã©crire :
	 * if (acc[candidate2017]) {
	 * 		// CandidatÂ·e dÃ©jÃ  rencontrÃ©Â·e, on incrÃ©mente
	 * 		acc[candidate2017]++;
	 * }
	 * else {
	 * 		// CandidatÂ·e jamais rencontrÃ©Â·e, on initialise Ã  1
	 * 		acc[candidate2017] = 1;
	 * }
	 * Parfois, on peut prÃ©fÃ©rer la clartÃ© Ã  la concision, c'est Ã  toi de juger !
	 */
})();